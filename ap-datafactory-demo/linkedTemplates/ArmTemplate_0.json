{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ap-datafactory-demo"
		},
		"apdatalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'apdatalake'"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ap-key-vault-storage.vault.azure.net/"
		},
		"apdatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://apdatalake.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-Integration-Runtime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationalRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/apdatalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('apdatalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('apdatalake_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-Integration-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-Integration-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NocMedalData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "apdatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "gold/noc_medal_data",
						"fileSystem": "ap-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/apdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Athlete_events')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "apdatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "athlete_events.csv",
						"folderPath": "bronze",
						"fileSystem": "ap-datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Sex",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Height",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "Team",
						"type": "String"
					},
					{
						"name": "NOC",
						"type": "String"
					},
					{
						"name": "Games",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Season",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Sport",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Medal",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/apdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_noc_regions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "apdatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "noc_regions.csv",
						"folderPath": "bronze",
						"fileSystem": "ap-datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "NOC",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/apdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_NocData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_noc_regions",
								"type": "DatasetReference"
							},
							"name": "NOCRegions"
						},
						{
							"dataset": {
								"referenceName": "csv_Athlete_events",
								"type": "DatasetReference"
							},
							"name": "AthleteEvent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "NocMedalData",
								"type": "DatasetReference"
							},
							"name": "ParquetSink"
						}
					],
					"transformations": [
						{
							"name": "FilteredAthleteEvents"
						},
						{
							"name": "Joined"
						},
						{
							"name": "CountMedals"
						},
						{
							"name": "MedalSplitted"
						},
						{
							"name": "GenAthletheColumns"
						},
						{
							"name": "RenameCommitee"
						}
					],
					"script": "source(output(\n\t\tNOC as string,\n\t\tregion as string,\n\t\tnotes as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true) ~> NOCRegions\nsource(output(\n\t\tID as string,\n\t\tName as string,\n\t\tSex as string,\n\t\tAge as integer '000',\n\t\tHeight as string,\n\t\tWeight as string,\n\t\tTeam as string,\n\t\tNOC as string,\n\t\tGames as string,\n\t\tYear as integer '000',\n\t\tSeason as string,\n\t\tCity as string,\n\t\tSport as string,\n\t\tEvent as string,\n\t\tMedal as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> AthleteEvent\nAthleteEvent filter(Medal != 'NA') ~> FilteredAthleteEvents\nGenAthletheColumns, RenameCommitee join(GenAthletheColumns@NOC == RenameCommitee@NOC,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Joined\nJoined aggregate(groupBy(GenAthletheColumns@NOC,\n\t\tCommitee),\n\tGold = sum(Gold),\n\t\tSilver = sum(Silver),\n\t\tBronze = sum(Bronze),\n\tpartitionBy('hash', 1)) ~> CountMedals\nFilteredAthleteEvents derive(Gold = case(Medal == 'Gold', 1, 0),\n\t\tSilver = case(Medal == 'Silver', 1, 0),\n\t\tBronze = case(Medal == 'Bronze', 1, 0)) ~> MedalSplitted\nMedalSplitted select(mapColumn(\n\t\tNOC,\n\t\tGold,\n\t\tSilver,\n\t\tBronze\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> GenAthletheColumns\nNOCRegions select(mapColumn(\n\t\tNOC,\n\t\tCommitee = region\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCommitee\nCountMedals sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ParquetSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_noc_regions')]",
				"[concat(variables('factoryId'), '/datasets/csv_Athlete_events')]",
				"[concat(variables('factoryId'), '/datasets/NocMedalData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_join_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_NocData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_NocData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"NOCRegions": {},
									"AthleteEvent": {},
									"ParquetSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_NocData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyOnceTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Test_join_pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-20T12:20:00.000Z",
						"endTime": "2020-05-21T12:20:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								24
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Test_join_pipeline')]"
			]
		}
	]
}